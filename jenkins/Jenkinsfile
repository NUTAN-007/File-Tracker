pipeline {
    agent any

    environment {
        DOCKER_HUB_USER = 'nutan007'
        IMAGE_WEB = "${DOCKER_HUB_USER}/text-tracker-web:latest"
        IMAGE_SIDECAR = "${DOCKER_HUB_USER}/text-tracker-sidecar:latest"
        KUBE_CONFIG = credentials('kubeconfig-credentials-id')
    }

    stages {
        stage('Build Docker Images') {
            steps {
                script {
                    sh 'docker build -t $IMAGE_WEB -f app/Dockerfiles/Dockerfile.web .'
                    sh 'docker build -t $IMAGE_SIDECAR -f app/Dockerfiles/Dockerfile.sidecar .'
                }
            }
        }

        stage('Push Images to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                    sh 'docker push $IMAGE_WEB'
                    sh 'docker push $IMAGE_SIDECAR'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            environment {
                POSTGRES_USER = credentials('pg-user')         // Jenkins secret text credential
                POSTGRES_PASSWORD = credentials('pg-password') // Jenkins secret text credential
                POSTGRES_DB = credentials('pg-db')             // Jenkins secret text credential
            }

            steps {
                withCredentials([file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG')]) {
                    sh '''
                    # Create namespace
                    kubectl apply -f k8s/namespace.yaml

                    # Create DB secret
                    kubectl create secret generic db-secret \
                      --from-literal=POSTGRES_USER=$POSTGRES_USER \
                      --from-literal=POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
                      --from-literal=POSTGRES_DB=$POSTGRES_DB \
                      -n tracker-ns --dry-run=client -o yaml | kubectl apply -f -

                    # Create ConfigMap for init.sql
                    kubectl create configmap init-sql \
                      --from-file=init/init.sql \
                      -n tracker-ns --dry-run=client -o yaml | kubectl apply -f -

                    # Apply all manifests
                    kubectl apply -f k8s/web-configmap.yaml
		    kubectl apply -f k8s/postgres-pv.yaml
		    kubectl apply -f k8s/postgres-pvc.yaml 
                    kubectl apply -f k8s/postgres-deployment.yaml
                    kubectl apply -f k8s/app-deployment.yaml
                    kubectl apply -f k8s/app-service.yaml
                    '''
                }
            }
        }
    }
}
